#lang racket

(define (add-rat x y)
    (make-rat   (+  (*  (numer x) (denom y))
                    (* (numer y) (denom x))
                )
                (*  (denom x) (denom y))
    )
)
(define (sub-rat x y)
    (make-rat   (-  (* (numer x) (denom y))
                    (*  (numer y) (denom x))
                )
                (* (denom x) (denom y))
    )
)

(define (mul-rat x y)
    (make-rat   (* (numer x) (numer y))
                (* (denom x) (denom y))))

(define (div-rat x y)
    (make-rat   (*  (numer x) (denom y))
                (*  (denom x) (numer y))
    )
)


(define (equal-rat? x y)
    (=  (*  (numer x) (denom y))
        (*  (numer y) (denom x))
    )
)

(define (gcd a b)
    (cond   ((= b 0) a)
            (else (gcd b (remainder a b)))
    )
)
(define (positive? x)
    (> x 0)
)
(define (negative? x)
    (< x 0)
)

(define (zero? x)
    (= x 0)
)
(define (norm x)
    (cond   ((or (and    (negative? (numer x)) (positive? (denom x)))
                (and    (positive? (numer x)) (negative? (denom x)))
            )
            (cons   (-  (abs (car x)) 0)
                    (abs (cdr x))
            ))
    )
)
(define (make-rat n d)
    (norm   (let ((g (gcd n d)))
            (cons (/ n g) (/ d g))
        )
    )
)


(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x) (newline)
    (display (numer x))
    (display "/")
    (display (denom x))
)

(print-rat (make-rat 12 16))
