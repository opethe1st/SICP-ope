#lang racket


(define (A x y)
    (cond   ((= y 0) 0)
            ((= x 0) (* 2 y))
            ((= y 1) 2)
            (else (A (- x 1) (A x (- y 1))))
    )
)


(A 1 10)
(newline)
(A 2 4)
(newline)
(A 3 3)

(define (f n)
    (A 0 n)
)
; this is f(n) = 2n
(define (g n)
    (A 1 n)
)
; this is g(n) = 2**n

(define (h n)
    (A 2 n)
)
; this is h(n) = 2**h(n-1)
(h 1)
(newline)
(h 2)
(newline)
(h 3)
(newline)
(h 4)
(newline)
(display "hre" )
(newline)
(define (power n m)
    (define (even? n)
        (= (modulo n 2) 0)
    )
    (define (square n)
        (* n n)
    )
    (cond   ((= m 0) 1)
            ((even? m) (power (square n) (/ m 2)))
            (else (* n (power n (- m 1))))
    )
)
(define (i n)
    (if (= n 1)
        2
        (power 2 (i (- n 1)))
    )
)
(display (= (h 1) (i 1)))
(display (= (h 2) (i 2)))
(display (= (h 3) (i 3)))
(display (= (h 4) (i 4)))
